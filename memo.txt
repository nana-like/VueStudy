# MEMO

## Enhanced Object Literals (향상된 객체 리터럴)

- ES6에서는 객체의 속성을 메서드로 사용할 때 `function` 예약어를 생략할 수 있다.
  
```javascript
  let me = {
    name: 'nana',
    sayHello: function(){
      console.log('Hello');
    },
    sayBye(){
      console.log('Bye');
    }
  }
```

- ES6에서는 객체의 속성과 값의 이름이 동일하면 축약할 수 있다.

```javascript
  let name = 'nana';
  let object = {
    // name : name
    name
  }
```

## Modules

- ES6부터는 자바스크립트 모듈 로더 라이브러리(AMD, Commons JS) 기능을 자체 지원한다.
- 호출 전에는 코드가 실행/동작되지 않는다.

```javascript
  // libs/math.js
  export function sum(x,y){
    return x+y;
  }
  export const pi = 3.141593;

  // main.js
  import { sum } from 'libs/math.js';
  sum (1,2);
```

- Vue.js에서 사용하는 `default` export는 한 파일에서 하나만 export 할 수 있다.

```javascript
  // util.js
  export default function(x){
    return console.log(x);
  }  

  // main.js
  import util from 'util.js';
  console.log(util);
  util("hi");

  // app.js
  import log from 'util.js';
  console.log(log);
  log("hi");
```



## Vuex
- 복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리하기 위한 상태 관리 패턴이자 라이브러리
- React의 Flux 패턴에서 기인함
- MVC 패턴의 구조적 오류를 해결할 수 있고, 여러 개의 컴포넌트에서 같은 데이터를 업데이트할 때 동기화 문제를 해결할 수 있다.

### Flux
- MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴

```
* MVC 패턴
Controller ----> Model <----> View
> 기능 추가 및 변경에 따라 생기는 문제점을 예측할 수 없음

* Flux 패턴
Action ---> Dispatcher ---> Model ---> View
> 데이터 흐름을 단방향으로만 처리

1. Action (화면에서 발생하는 이벤트 / 사용자 입력)
2. Dispatcher (데이터를 변경하는 방법, 메서드)
3. Model (화면에 표시할 데이터)
4. View (사용자에게 보여지는 화면)
```



#### Questions!
- MVC 패턴이란?
